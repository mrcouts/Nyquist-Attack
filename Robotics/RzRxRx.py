from Serial import *

RR = Serial("RR", '0', Matrix([['z','x','x'],['z','y','y']]).T)
mot = Motor("mot",'1')

ph_ = RR.ph_
po_ = mot.p_
p_ = Matrix([ph_,po_])
M_ = diag(RR.Mh_sb_, mot.M_)
v_ = Matrix([RR.vh_sb_, mot.v_])
g_ = Matrix([RR.gh_sb_, mot.g_])
phi_ = po_ - Matrix([RR.vw_[1][0]+symbols('gamma')*ph_[2],RR.vw_[1][1],RR.vw_[1][2],RR.vv_[1][0],RR.vv_[1][1],RR.vv_[1][2]]).subs(RR.StaticBal)
Ah_ = phi_.jacobian(ph_)
Ao_ = phi_.jacobian(po_)
C_ = Matrix([eye(3),simplify(-Ao_**-1 * Ah_)])
Mh_ = simplify( (C_.T * M_ * C_) )
vh_ = simplify(  (C_.T * ( M_ * C_.diff(t)*ph_ + v_ ) ) )
gh_ = simplify(C_.T *g_)
Sol = solve( Matrix([Mh_[2,1]]) , symbols('gamma') )
Mh_db_ = simplify( Mh_.subs(Sol).subs([(RR.Jy[1], RR.Jz[1]), (RR.Jy[2], RR.Jz[2])]).subs(mot.Jy, mot.Jz +RR.m[2]*RR.l[1]**2 + RR.m[2]**2 * RR.l[1]**2 / RR.m[1]))
vh_db_ = simplify( vh_.subs(Sol).subs([(RR.Jy[1], RR.Jz[1]), (RR.Jy[2], RR.Jz[2])]).subs(mot.Jy, mot.Jz +RR.m[2]*RR.l[1]**2 + RR.m[2]**2 * RR.l[1]**2 / RR.m[1]))
gh_db_ = simplify(gh_.subs(Sol))
J__ = Jacobian(vh_db_.jacobian(ph_),ph_)

pprint(p_)
pprint(M_)
pprint(v_)
pprint(g_)
pprint(phi_)
pprint(Ah_)
pprint(Ao_)
pprint(C_)
pprint(Mh_)
pprint(vh_)
pprint(gh_)
pprint(Sol)
pprint(Mh_db_)
pprint(vh_db_)
pprint(gh_db_)
pprint( J__[0] )
pprint( J__[1] )
pprint( J__[2] )
