(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



RigidBody=Function[{bodyidnumber,numberofnodes,centerofmassdata,mass, momentofinertia,gravity,systemofforces},

(*Define new body*)
If[ValueQ[BodiesIndexes],{},BodiesIndexes={}];
AppendTo[BodiesIndexes,bodyidnumber];
BodiesIndexes=DeleteDuplicates[BodiesIndexes];

(*Define new nodes*)
If[ValueQ[NodesIndexes],{},NodesIndexes={}];
AppendTo[NodesIndexes,{bodyidnumber,#}]&/@Range[numberofnodes];
NodesIndexes=DeleteDuplicates[NodesIndexes];
(Subscript[n,bodyidnumber,#]=Function[{t},{Subscript[q,"N",bodyidnumber,2(#-1)+1][t],Subscript[q,"N",bodyidnumber,2(#-1)+2][t]}])&/@Range[numberofnodes];

(*Define new coordinates and new quasivelocities*)
If[ValueQ[CoordinatesIndexes],{},CoordinatesIndexes={}];
AppendTo[CoordinatesIndexes,
{"N",bodyidnumber,#}]&/@Range[2 numberofnodes];
CoordinatesIndexes=DeleteDuplicates[CoordinatesIndexes];
If[ValueQ[QuasivelocitiesIndexes],{},QuasivelocitiesIndexes={}];
AppendTo[QuasivelocitiesIndexes,
{"N",bodyidnumber,#}]&/@Range[2 numberofnodes];
AppendTo[QuasivelocitiesIndexes,
{"B",bodyidnumber,#}]&/@{3};
QuasivelocitiesIndexes=DeleteDuplicates[QuasivelocitiesIndexes];

(*Relating new coordinate with new quasivelocity*)
If[ValueQ[QuasivelocitiesTransformations],0,QuasivelocitiesTransformations={}];
AppendTo[QuasivelocitiesTransformations,Derivative[1][Subscript[q,"N",bodyidnumber,#]][t]-Subscript[p,"N",bodyidnumber,#][t]]&/@Range[2 numberofnodes];
QuasivelocitiesTransformations=DeleteDuplicates[QuasivelocitiesTransformations];
QuasivelocitiesTransformations=DeleteCases[QuasivelocitiesTransformations,_Integer];

(*Rigid Body holonomic constraint equations*)
If[ValueQ[HolonomicConstraintEquations],0,HolonomicConstraintEquations={}];
AppendTo[HolonomicConstraintEquations,(Subscript[a,bodyidnumber,#1,#2])^2-(Subscript[q,"N",bodyidnumber,2(#2-1)+1][t]-Subscript[q,"N",bodyidnumber,2(#1-1)+1][t])^2-(Subscript[q,"N",bodyidnumber,2(#2-1)+2][t]-Subscript[q,"N",bodyidnumber,2(#1-1)+2][t])^2]&@@@DeleteCases[Flatten[Outer[If[#1< #2,{#1,#2},0]&,#,#]&@Range[numberofnodes],1],0];
HolonomicConstraintEquations=DeleteDuplicates[HolonomicConstraintEquations];
HolonomicConstraintEquations=DeleteCases[HolonomicConstraintEquations,_Integer];

If[ValueQ[ParameterReplace],0,ParameterReplace={}];
AppendTo[ParameterReplace,((Subscript[q,"N",bodyidnumber,2(#2-1)+1][t]-Subscript[q,"N",bodyidnumber,2(#1-1)+1][t])^2+(Subscript[q,"N",bodyidnumber,2(#2-1)+2][t]-Subscript[q,"N",bodyidnumber,2(#1-1)+2][t])^2)-> (Subscript[a,bodyidnumber,#1,#2])^2]&@@@DeleteCases[Flatten[Outer[If[#1< #2,{#1,#2},0]&,#,#]&@Range[numberofnodes],1],0];
ParameterReplace=DeleteDuplicates[ParameterReplace];
ParameterReplace=DeleteCases[ParameterReplace,_Integer->_];

(*Rigid Body constraint equations*)
If[ValueQ[ConstraintEquations],0,ConstraintEquations={}];
AppendTo[ConstraintEquations,#]&/@Flatten[{Subscript[p,"N",bodyidnumber,2(#-1)+1][t],Subscript[p,"N",bodyidnumber,2(#-1)+2][t],0}-{Subscript[p,"N",bodyidnumber,1][t],Subscript[p,"N",bodyidnumber,2][t],0}-{0,0,Subscript[p,"B",bodyidnumber,3][t]}\[Cross]({Subscript[q,"N",bodyidnumber,2(#-1)+1][t],Subscript[q,"N",bodyidnumber,2(#-1)+2][t],0}-{Subscript[q,"N",bodyidnumber,1][t],Subscript[q,"N",bodyidnumber,2][t],0})&/@Range[2,numberofnodes]];
ConstraintEquations=DeleteDuplicates[ConstraintEquations];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];

(*Generalized active and inertia forces*)
Module[{node1=centerofmassdata[[1,1]],node2=centerofmassdata[[1,2]],a1=centerofmassdata[[2,1]],a2=centerofmassdata[[2,2]],centerofmassvelocity,gx=gravity[[1]],gy=gravity[[2]],fx=systemofforces[[1]],fy=systemofforces[[2]],tz=systemofforces[[3]]},

centerofmassvelocity=Delete[(1-a1){Subscript[p,"N",bodyidnumber,2(node1-1)+1][t],Subscript[p,"N",bodyidnumber,2(node1-1)+2][t],0}+a1{Subscript[p,"N",bodyidnumber,2(node2-1)+1][t],Subscript[p,"N",bodyidnumber,2(node2-1)+2][t],0}+a2 {0,0,1}\[Cross]({Subscript[p,"N",bodyidnumber,2(node2-1)+1][t],Subscript[p,"N",bodyidnumber,2(node2-1)+2][t],0}-{Subscript[p,"N",bodyidnumber,2(node1-1)+1][t],Subscript[p,"N",bodyidnumber,2(node1-1)+2][t],0}),3];

If[NumericQ[Subscript[p,"N",bodyidnumber,#][t]],0,
(Subscript[fa,"N",bodyidnumber,#][t]=FullSimplify[{fx+mass gx,fy+mass gy}.D[centerofmassvelocity,Subscript[p,"N",bodyidnumber,#][t]]]);
(Subscript[fi,"N",bodyidnumber,#][t]=FullSimplify[-mass D[centerofmassvelocity,t].D[centerofmassvelocity,Subscript[p,"N",bodyidnumber,#][t]]])]&/@{2(node1-1)+1,2(node1-1)+2,2(node2-1)+1,2(node2-1)+2};

If[NumericQ[Subscript[p,"N",bodyidnumber,#][t]],0,
(Subscript[fa,"N",bodyidnumber,#][t]=0);
(Subscript[fi,"N",bodyidnumber,#][t]=0)]&/@Complement[Range[2 numberofnodes],{2(node1-1)+1,2(node1-1)+2,2(node2-1)+1,2(node2-1)+2}];

If[NumericQ[Subscript[p,"B",bodyidnumber,3][t]],0,
Subscript[fa,"B",bodyidnumber,3][t]=tz;
Subscript[fi,"B",bodyidnumber,3][t]=-momentofinertia D[Subscript[p,"B",bodyidnumber,3][t],t]];
];
];


RevoluteJoint=Function[{body1,node1, body2,node2,torque},
Module[{bodyM,nodeM,bodyS,nodeS},

(*Master and slave bodies*)
If[body1<body2,bodyM=body1;nodeM=node1;bodyS=body2;nodeS=node2,bodyM=body2;nodeM=node2;bodyS=body1;nodeS=node1];

(*Variable elimination*)
Subscript[q,"N",bodyS,2(nodeS-1)+1][t_]=Subscript[q,"N",bodyM,2(nodeM-1)+1][t];
Subscript[q,"N",bodyS,2(nodeS-1)+2][t_]=Subscript[q,"N",bodyM,2(nodeM-1)+2][t];
Subscript[p,"N",bodyS,2(nodeS-1)+1][t_]=Subscript[p,"N",bodyM,2(nodeM-1)+1][t];
Subscript[p,"N",bodyS,2(nodeS-1)+2][t_]=Subscript[p,"N",bodyM,2(nodeM-1)+2][t];

If[TrueQ[torque==0],

(*-TRUE-*)
QuasivelocitiesIndexes=DeleteCases[QuasivelocitiesIndexes,{"R",bodyM,bodyS}];
ConstraintEquations=DeleteCases[ConstraintEquations,Subscript[p,"R",bodyM,bodyS][t]-(Subscript[p,"B",bodyS,3][t]-Subscript[p,"B",bodyM,3][t])];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];
Quiet@If[ValueQ[Subscript[fa,"R",bodyM,bodyS][t]],Unset[Subscript[fa,"R",bodyM,bodyS][t]]];
Quiet@If[ValueQ[Subscript[fi,"R",bodyM,bodyS][t]],Unset[Subscript[fi,"R",bodyM,bodyS][t]]];,

(*-FALSE-*)
(*Define new quasivelocity*)
If[ValueQ[QuasivelocitiesIndexes],{},QuasivelocitiesIndexes={}];
AppendTo[QuasivelocitiesIndexes,
{"R",bodyM,bodyS}];
QuasivelocitiesIndexes=DeleteDuplicates[QuasivelocitiesIndexes];

(*Revolute Joint constraint equation*)
If[ValueQ[ConstraintEquations],0,ConstraintEquations={}];
AppendTo[ConstraintEquations,
Subscript[p,"R",bodyM,bodyS][t]-(Subscript[p,"B",bodyS,3][t]-Subscript[p,"B",bodyM,3][t])];
ConstraintEquations=DeleteDuplicates[ConstraintEquations];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];

(*Generalized active and inertia forces associated to joint torque*)
Subscript[fa,"R",bodyM,bodyS][t]=Sign[body2-body1]torque;
Subscript[fi,"R",bodyM,bodyS][t]=0;
];
];];



PrismaticJoint=Function[{body1,node11, node12 , body2,node2,force},
Module[{bodyM,nodeM,bodyS,nodeS},

(*Master and slave bodies*)
If[body1<body2,bodyM=body1;bodyS=body2,bodyM=body2;bodyS=body1];
If[node11<node12,nodeM=node11;nodeS=node12,nodeM=node12;nodeS=node11];

(*Variable elimination*)
Subscript[p,"B",bodyS,3][t_]=Subscript[p,"B",bodyM,3][t];

(*Define new coordinate and new quasivelocity*)
If[ValueQ[CoordinatesIndexes],{},CoordinatesIndexes={}];
AppendTo[CoordinatesIndexes,
{"P",bodyM,bodyS}];
CoordinatesIndexes=DeleteDuplicates[CoordinatesIndexes];
If[ValueQ[QuasivelocitiesIndexes],{},QuasivelocitiesIndexes={}];
AppendTo[QuasivelocitiesIndexes,
{"P",bodyM,bodyS}];
QuasivelocitiesIndexes=DeleteDuplicates[QuasivelocitiesIndexes];

(*Relating new coordinate with new quasivelocity*)
If[ValueQ[QuasivelocitiesTransformations],0,QuasivelocitiesTransformations={}];
AppendTo[QuasivelocitiesTransformations,#]&/@{Derivative[1][Subscript[q,"P",bodyM,bodyS]][t]-Subscript[p,"P",bodyM,bodyS][t]};
QuasivelocitiesTransformations=DeleteDuplicates[QuasivelocitiesTransformations];
QuasivelocitiesTransformations=DeleteCases[QuasivelocitiesTransformations,_Integer];

(*Prismatic Joint constraint equations*)
If[ValueQ[HolonomicConstraintEquations],0,HolonomicConstraintEquations={}];
AppendTo[HolonomicConstraintEquations,#]&/@{Subscript[a,body1,nodeM,nodeS]Subscript[q,"N",body2,2(node2-1)+1][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[q,"N",body1,2(nodeM-1)+1][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[q,"N",body1,2(nodeS-1)+1][t],Subscript[a,body1,nodeM,nodeS]Subscript[q,"N",body2,2(node2-1)+2][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[q,"N",body1,2(nodeM-1)+2][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[q,"N",body1,2(nodeS-1)+2][t]};
HolonomicConstraintEquations=DeleteDuplicates[HolonomicConstraintEquations];
HolonomicConstraintEquations=DeleteCases[HolonomicConstraintEquations,_Integer];

If[ValueQ[ConstraintEquations],0,ConstraintEquations={}];
AppendTo[ConstraintEquations,#]&/@{(Subscript[q,"N",body1,2(nodeM-1)+1][t]-Subscript[q,"N",body1,2(nodeS-1)+1][t])Subscript[p,"P",bodyM,bodyS][t]+Subscript[a,body1,nodeM,nodeS]Subscript[p,"N",body2,2(node2-1)+1][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[p,"N",body1,2(nodeM-1)+1][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[p,"N",body1,2(nodeS-1)+1][t],(Subscript[q,"N",body1,2(nodeM-1)+2][t]-Subscript[q,"N",body1,2(nodeS-1)+2][t])Subscript[p,"P",bodyM,bodyS][t]+Subscript[a,body1,nodeM,nodeS]Subscript[p,"N",body2,2(node2-1)+2][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[p,"N",body1,2(nodeM-1)+2][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[p,"N",body1,2(nodeS-1)+2][t]};
ConstraintEquations=DeleteDuplicates[ConstraintEquations];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];

(*Generalized active and inertia forces associated to joint force*)
Subscript[fa,"P",bodyM,bodyS][t]=Sign[node12-node11]force;
Subscript[fi,"P",bodyM,bodyS][t]=0;

];];


PrismaticRevoluteJoint=Function[{body1,node11, node12 , body2,node2,force,torque},
Module[{bodyM,nodeM,bodyS,nodeS},

(*Master and slave bodies*)
If[body1<body2,bodyM=body1;bodyS=body2,bodyM=body2;bodyS=body1];
If[node11<node12,nodeM=node11;nodeS=node12,nodeM=node12;nodeS=node11];

(*Define new coordinate and new quasivelocity*)
If[ValueQ[CoordinatesIndexes],{},CoordinatesIndexes={}];
AppendTo[CoordinatesIndexes,
{"P",bodyM,bodyS}];
CoordinatesIndexes=DeleteDuplicates[CoordinatesIndexes];
If[ValueQ[QuasivelocitiesIndexes],{},QuasivelocitiesIndexes={}];
AppendTo[QuasivelocitiesIndexes,
{"P",bodyM,bodyS}];
QuasivelocitiesIndexes=DeleteDuplicates[QuasivelocitiesIndexes];

(*Relating new coordinate with new quasivelocity*)
If[ValueQ[QuasivelocitiesTransformations],0,QuasivelocitiesTransformations={}];
AppendTo[QuasivelocitiesTransformations,#]&/@{Derivative[1][Subscript[q,"P",bodyM,bodyS]][t]-Subscript[p,"P",bodyM,bodyS][t]};
QuasivelocitiesTransformations=DeleteDuplicates[QuasivelocitiesTransformations];
QuasivelocitiesTransformations=DeleteCases[QuasivelocitiesTransformations,_Integer];

(*Prismatic Joint constraint equations*)
If[ValueQ[HolonomicConstraintEquations],0,HolonomicConstraintEquations={}];
AppendTo[HolonomicConstraintEquations,#]&/@{Subscript[a,body1,nodeM,nodeS]Subscript[q,"N",body2,2(node2-1)+1][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[q,"N",body1,2(nodeM-1)+1][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[q,"N",body1,2(nodeS-1)+1][t],Subscript[a,body1,nodeM,nodeS]Subscript[q,"N",body2,2(node2-1)+2][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[q,"N",body1,2(nodeM-1)+2][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[q,"N",body1,2(nodeS-1)+2][t]};
HolonomicConstraintEquations=DeleteDuplicates[HolonomicConstraintEquations];
HolonomicConstraintEquations=DeleteCases[HolonomicConstraintEquations,_Integer];

If[ValueQ[ConstraintEquations],0,ConstraintEquations={}];
AppendTo[ConstraintEquations,#]&/@{(Subscript[q,"N",body1,2(nodeM-1)+1][t]-Subscript[q,"N",body1,2(nodeS-1)+1][t])Subscript[p,"P",bodyM,bodyS][t]+Subscript[a,body1,nodeM,nodeS]Subscript[p,"N",body2,2(node2-1)+1][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[p,"N",body1,2(nodeM-1)+1][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[p,"N",body1,2(nodeS-1)+1][t],(Subscript[q,"N",body1,2(nodeM-1)+2][t]-Subscript[q,"N",body1,2(nodeS-1)+2][t])Subscript[p,"P",bodyM,bodyS][t]+Subscript[a,body1,nodeM,nodeS]Subscript[p,"N",body2,2(node2-1)+2][t]-(Subscript[a,body1,nodeM,nodeS]-Subscript[q,"P",bodyM,bodyS][t])Subscript[p,"N",body1,2(nodeM-1)+2][t]-Subscript[q,"P",bodyM,bodyS][t]Subscript[p,"N",body1,2(nodeS-1)+2][t]};
ConstraintEquations=DeleteDuplicates[ConstraintEquations];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];

(*Generalized active and inertia forces associated to joint force*)
Subscript[fa,"P",bodyM,bodyS][t]=Sign[node12-node11]force;
Subscript[fi,"P",bodyM,bodyS][t]=0;

If[TrueQ[torque==0],

(*-TRUE-*)
QuasivelocitiesIndexes=DeleteCases[QuasivelocitiesIndexes,{"R",bodyM,bodyS}];
ConstraintEquations=DeleteCases[ConstraintEquations,Subscript[p,"R",bodyM,bodyS][t]-(Subscript[p,"B",bodyS,3][t]-Subscript[p,"B",bodyM,3][t])];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];
Quiet@If[ValueQ[Subscript[fa,"R",bodyM,bodyS][t]],Unset[Subscript[fa,"R",bodyM,bodyS][t]]];
Quiet@If[ValueQ[Subscript[fi,"R",bodyM,bodyS][t]],Unset[Subscript[fi,"R",bodyM,bodyS][t]]];,

(*-FALSE-*)
(*Define new quasivelocity*)
If[ValueQ[QuasivelocitiesIndexes],{},QuasivelocitiesIndexes={}];
AppendTo[QuasivelocitiesIndexes,
{"R",bodyM,bodyS}];
QuasivelocitiesIndexes=DeleteDuplicates[QuasivelocitiesIndexes];

(*Revolute Joint constraint equation*)
If[ValueQ[ConstraintEquations],0,ConstraintEquations={}];
AppendTo[ConstraintEquations,
Subscript[p,"R",bodyM,bodyS][t]-(Subscript[p,"B",bodyS,3][t]-Subscript[p,"B",bodyM,3][t])];
ConstraintEquations=DeleteDuplicates[ConstraintEquations];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];

(*Generalized active and inertia forces associated to joint torque*)
Subscript[fa,"R",bodyM,bodyS][t]=Sign[body2-body1]torque;
Subscript[fi,"R",bodyM,bodyS][t]=0;
];
];];


BaseBody=Function[{bodyidnumber, nodalcoordinates},
Block[{nodeid},(nodeid=#;
If[NumericQ[#],0,#[t_]=0]&/@{(*Subscript[q,"N",bodyidnumber,2(nodeid-1)+1],
Subscript[q,"N",bodyidnumber,2(nodeid-1)+2],*)
Subscript[p,"N",bodyidnumber,2(nodeid-1)+1],
Subscript[p,"N",bodyidnumber,2(nodeid-1)+2]};
If[NumericQ[#],0,#[t_]=(0.+(#/.(nodalcoordinates/.(Equal-> Rule))))]&/@{Subscript[q,"N",bodyidnumber,2(nodeid-1)+1],
Subscript[q,"N",bodyidnumber,2(nodeid-1)+2]};
)&/@(Flatten@Reap[Sow[#2,#1]&@@@NodesIndexes,bodyidnumber][[2]])];
Subscript[p,"B",bodyidnumber,3][t]=0;
];


Initialize=Function[{},
ConstraintEquations=.;
HolonomicConstraintEquations=.;
QuasivelocitiesTransformations=.;
ParameterReplace=.;
ParametersIndexes=.;
GeneralizedForcesModel=.;

BodiesIndexes=.;
NodesIndexes=.;
CoordinatesIndexes=.;
QuasivelocitiesIndexes=.;
VariableCoordinatesIndexes=.;
VariableQuasivelocitiesIndexes=.;
Coordinates=.;
Quasivelocities=.;

InitialCoordinates=.;
UnknownMotionVariables1=.;
KinematicSimulationR1=.;
UnknownMotionVariables2=.;
KinematicSimulationR2=.;
DynamicSimulationR=.
];


AddQuasivelocity=Function[{newp,newforce,newinertiaforce},
Module[{newindex=(newp/.{Subscript[p, indexes__][t]-> indexes})(*, fnewindex=Function[{fnew},Evaluate[Subscript[fnew,##][t]&@@newindex]]*)},

(*Define new quasivelocities*)
If[ValueQ[QuasivelocitiesIndexes],{},QuasivelocitiesIndexes={}];
AppendTo[QuasivelocitiesIndexes,{newindex}];
QuasivelocitiesIndexes=DeleteDuplicates[QuasivelocitiesIndexes];

Subscript[fa,newindex][t]=newforce;
Subscript[fi,newindex][t]=newinertiaforce;
];];

AddCoordinate=Function[{newq,newquasivelocitytransformation},

(*Define new coordinate*)
If[ValueQ[CoordinatesIndexes],{},CoordinatesIndexes={}];
AppendTo[CoordinatesIndexes,(newq/.{Subscript[q, indexes__][t]-> {indexes}})];
CoordinatesIndexes=DeleteDuplicates[CoordinatesIndexes];

(*Relating new coordinate with model quasivelocities*)
If[ValueQ[QuasivelocitiesTransformations],0,QuasivelocitiesTransformations={}];
AppendTo[QuasivelocitiesTransformations,newquasivelocitytransformation];
QuasivelocitiesTransformations=DeleteDuplicates[QuasivelocitiesTransformations];
QuasivelocitiesTransformations=DeleteCases[QuasivelocitiesTransformations,_Integer];
];


AddConstraintEquation=Function[{newconstraintequation},
If[ValueQ[ConstraintEquations],0,ConstraintEquations={}];
AppendTo[ConstraintEquations,newconstraintequation];
ConstraintEquations=DeleteDuplicates[ConstraintEquations];
ConstraintEquations=DeleteCases[ConstraintEquations,_Integer];
];

AddHolonomicConstraintEquation=Function[{newconstraintequation},
If[ValueQ[HolonomicConstraintEquations],0,HolonomicConstraintEquations={}];
AppendTo[HolonomicConstraintEquations,newconstraintequation];
HolonomicConstraintEquations=DeleteDuplicates[HolonomicConstraintEquations];
HolonomicConstraintEquations=DeleteCases[HolonomicConstraintEquations,_Integer];
];


VariableReduction=Function[{},

Coordinates=Function[{t},Evaluate[DeleteCases[DeleteCases[DeleteDuplicates[Subscript[q,##][t]&@@@CoordinatesIndexes],_Integer],_Real]]];

Quasivelocities=Function[{t},Evaluate[DeleteCases[DeleteDuplicates[Subscript[p,##][t]&@@@QuasivelocitiesIndexes],_Integer]]];

GeneralizedForcesModel=Flatten[({((Subscript[f,"A",##][t]&)@@#1)->Total[Subscript[fa,##][t]&@@@#2],((Subscript[f,"I",##][t]&)@@#1)->Total[Subscript[fi,##][t]&@@@#2]})&@@@Reap[Sow[#1,{#2}]&@@@MapThread[{#1,#2}&,{QuasivelocitiesIndexes,Subscript[p,##][t]&@@@QuasivelocitiesIndexes/.{Subscript[p, indexes__][t]-> {indexes}}}],Except[_Integer],{#1,#2}&][[2]]];

ConstraintEquations=DeleteDuplicates[DeleteCases[DeleteCases[ConstraintEquations,_Integer],_Real]];
HolonomicConstraintEquations=DeleteDuplicates[DeleteCases[DeleteCases[HolonomicConstraintEquations,_Integer],_Real]];
QuasivelocitiesTransformations=DeleteDuplicates[DeleteCases[DeleteCases[QuasivelocitiesTransformations,_Integer],_Real]];

ExplicitQuasivelocitiesTransformations=Flatten@Solve[(#==0)&/@QuasivelocitiesTransformations,DeleteCases[Subscript[q,##]'[t]&@@@CoordinatesIndexes,_Integer]];

ParametersIndexes=(#[[2]]&/@ParameterReplace)/.(Subscript[a,indexes__]^2->List[indexes]);
VariableCoordinatesIndexes=(Coordinates[t])/.(Subscript[q,indexes__][t]-> List[indexes]);
VariableQuasivelocitiesIndexes=(Quasivelocities[t])/.(Subscript[p,indexes__][t]-> List[indexes]);

];


DynamicModel=Function[{},
ConstraintJacobian=D[ConstraintEquations,{Quasivelocities[t]}]/.{var_[t]-> var};
ConstraintMatrix=Function[{VariablesReplace},NullSpace[ConstraintJacobian/.VariablesReplace]];
GeneralizedActiveForces=(Quasivelocities[t]/.(Subscript[p,indexes__][t]-> Subscript[f,"A",indexes][t]))/.GeneralizedForcesModel;
GeneralizedInertiaForces=(Quasivelocities[t]/.(Subscript[p,indexes__][t]-> Subscript[f,"I",indexes][t]))/.GeneralizedForcesModel;
GeneralizedForces=Evaluate[(GeneralizedActiveForces+GeneralizedInertiaForces)/.{var_[t]-> var}];
DynamicEquations=Function[{VariablesReplace},ConstraintMatrix[VariablesReplace].(GeneralizedForces/.VariablesReplace)];
GeneralizedInertiaMatrix=D[GeneralizedInertiaForces,{D[Quasivelocities[t],t]}];
];



InverseSimulation=Function[{SimulationLabel,SimulationTime,SimulationData,InitialNodalCoordinates,PrescribedCoordinatesIndexes,PrescribedMotionsFunctions,BaumgarteStabilizationConstants,InverseSimulationUnknowns,InverseDynamicsMethod},

Inner[(#1[t_]=#2[t])&,Subscript[q,##,SimulationLabel]&@@@PrescribedCoordinatesIndexes,PrescribedMotionsFunctions,List];

InitialCoordinates=Join[(InitialNodalCoordinates/.(Equal-> Rule)),Flatten@NSolve[Join[Flatten[((#==0)&/@(HolonomicConstraintEquations/.{t->0}))/.SimulationData/.(InitialNodalCoordinates/.(Equal-> Rule))],Flatten[(Subscript[a,##]>0)&@@@ParametersIndexes]],Join[Flatten@Complement[Coordinates[0],(#[[1]])&/@InitialNodalCoordinates],Subscript[a,##]&@@@ParametersIndexes]]];

PrescribedCoordinatesReplace=Flatten[({(Subscript[q,##][t_]->Subscript[q,##,SimulationLabel][t]),(Subscript[q,##]'[t_]->Subscript[q,##,SimulationLabel]'[t]),
(Subscript[q,##]''[t_]->Subscript[q,##,SimulationLabel]''[t])}&@@@PrescribedCoordinatesIndexes)];

UnknownMotionVariables0=Join[Complement[Subscript[q,##]'[0]&@@@VariableCoordinatesIndexes,Subscript[q,##]'[0]&@@@PrescribedCoordinatesIndexes],Subscript[p,##][0]&@@@VariableQuasivelocitiesIndexes];

UnknownMotionVariables1=Join[Complement[Subscript[q,##]&@@@VariableCoordinatesIndexes,Subscript[q,##]&@@@PrescribedCoordinatesIndexes],Subscript[p,##]&@@@VariableQuasivelocitiesIndexes];

UnknownMotionVariables2=Join[Complement[Subscript[q,##]&@@@VariableCoordinatesIndexes,Subscript[q,##]&@@@PrescribedCoordinatesIndexes],Subscript[p,##]&@@@VariableQuasivelocitiesIndexes,Subscript[p,##]'&@@@VariableQuasivelocitiesIndexes];

KinematicSimulationR1=Join[InitialCoordinates,Flatten@NSolve[Join[(#==0)&/@(ConstraintEquations),(#==0)&/@(QuasivelocitiesTransformations)]/.PrescribedCoordinatesReplace/.{t->0}/.SimulationData/.InitialCoordinates,UnknownMotionVariables0]];

(*

UnknownMotionVariablesD1=Join[Complement[Subscript[q,##]'[t]&@@@VariableCoordinatesIndexes,Subscript[q,##]'[t]&@@@PrescribedCoordinatesIndexes],Subscript[p,##][t]&@@@VariableQuasivelocitiesIndexes];

InverseKinematicsEquations1=
Simplify[Flatten[(Solve[Join[(#\[Equal]0)&/@(ConstraintEquations),(#\[Equal]0)&/@(QuasivelocitiesTransformations)]/.SimulationData/.InitialCoordinates,UnknownMotionVariablesD1]/.PrescribedCoordinatesReplace)]/.(Rule\[Rule] Equal)];

KinematicSimulationR1=Join[Flatten[({(Subscript[q,##][t_]\[Rule]Subscript[q,##,SimulationLabel][t])}&@@@PrescribedCoordinatesIndexes)],Flatten[NDSolve[(Join[InverseKinematicsEquations1,(#\[Equal](#/.InitialCoordinates/.SimulationData/.PrescribedCoordinatesReplace))&/@Complement[Coordinates[0],Subscript[q,##][0]&@@@PrescribedCoordinatesIndexes]]),UnknownMotionVariables1,{t,0,SimulationTime},Method\[Rule]{"IndexReduction"\[Rule]{True,"ConstraintMethod"\[Rule]"Projection"}},
PrecisionGoal\[Rule]16,AccuracyGoal\[Rule]15.5]//Quiet]];

KinematicSimulationR1=Join[Flatten[({(Subscript[q,##][t_]\[Rule]Subscript[q,##,SimulationLabel][t])}&@@@PrescribedCoordinatesIndexes)],Flatten[NDSolve[((Join[(#\[Equal]0)&/@(ConstraintEquations/.InitialCoordinates),(#\[Equal]0)&/@(QuasivelocitiesTransformations/.InitialCoordinates),(#\[Equal](#/.InitialCoordinates))&/@Complement[Coordinates[0],Subscript[q,##][0]&@@@PrescribedCoordinatesIndexes]]/.SimulationData)/.Flatten[({(Subscript[q,##][t_]\[Rule]Subscript[q,##,SimulationLabel][t]),(Subscript[q,##]'[t_]\[Rule]Subscript[q,##,SimulationLabel]'[t]),
(Subscript[q,##]''[t_]\[Rule]Subscript[q,##,SimulationLabel]''[t])}&@@@PrescribedCoordinatesIndexes)]),UnknownMotionVariables1,{t,0,SimulationTime},Method\[Rule]{"IndexReduction"\[Rule]{True,"ConstraintMethod"\[Rule]"Projection"}},
PrecisionGoal\[Rule]16,AccuracyGoal\[Rule]15.5]//Quiet]];

*)

KinematicSimulationR2=Join[Flatten[({(Subscript[q,##][t_]->Subscript[q,##,SimulationLabel][t]),(Subscript[q,##]'[t_]->D[Subscript[q,##,SimulationLabel][t],t])}&@@@PrescribedCoordinatesIndexes)],
Flatten[NDSolve[((Join[(#==0)&/@((D[ConstraintEquations,t]+BaumgarteStabilizationConstants[[1]]ConstraintEquations)/.InitialCoordinates),
(#==0)&/@(QuasivelocitiesTransformations/.InitialCoordinates),(#==(#/.KinematicSimulationR1))&/@Join[Complement[Coordinates[0],Subscript[q,##][0]&@@@PrescribedCoordinatesIndexes],Quasivelocities[0]]]/.SimulationData)/.PrescribedCoordinatesReplace),UnknownMotionVariables2,{t,0,SimulationTime}]//Quiet]];

Inner[(#1[t_]=#2[t])&,UnknownMotionVariables1/.(Subscript[head_,indexes__]->Subscript[head,indexes,SimulationLabel] ),UnknownMotionVariables1/.KinematicSimulationR2,List];

PrescribedMotionRules[t_]:=Join[(Subscript[q,##]-> Subscript[q,##,SimulationLabel][t])&@@@VariableCoordinatesIndexes,(Subscript[p,##]-> Subscript[p,##,SimulationLabel][t])&@@@VariableQuasivelocitiesIndexes,(Subscript[p,##]'->(Subscript[p,##]'[t]/.KinematicSimulationR2))&@@@VariableQuasivelocitiesIndexes,
(#-> #[t])&/@InverseSimulationUnknowns];

InverseDynamicsEquations[t_]:=(DynamicEquations[Join[PrescribedMotionRules[t],SimulationData,InitialCoordinates]]/.SimulationData/.InitialCoordinates);

If[InverseDynamicsMethod[[1]]=="Continuous",
DynamicSimulationR=NDSolve[Join[(#==0)&/@(InverseDynamicsEquations[t]),{foo'[t]==0,foo[0]==0}],Join[InverseSimulationUnknowns,{foo}],{t,0,SimulationTime},Method->{"IndexReduction"->{True,"ConstraintMethod"->"Projection"}}];
Inner[(#1[t_]=#2[t])&,InverseSimulationUnknowns/.(Subscript[head_,indexes__]->Subscript[head,indexes,SimulationLabel] ),InverseSimulationUnknowns/.DynamicSimulationR,List];
,0];

If[InverseDynamicsMethod[[1]]=="Discrete",
Module[{DiscreteInverseDynamicsSimulation,DiscreteTimeRange},
DiscreteTimeRange=(SimulationTime Range[0,InverseDynamicsMethod[[2]]]/InverseDynamicsMethod[[2]]);(DiscreteInverseDynamicsSimulation[#]=Flatten[NSolve[InverseDynamicsEquations[#],(Function[var,var[#]]/@InverseSimulationUnknowns)]])&/@DiscreteTimeRange;
Inner[(#1[t_]=
Interpolation[Function[timevar,{timevar,(#2[timevar]/.DiscreteInverseDynamicsSimulation[timevar])}]/@DiscreteTimeRange][t])&,InverseSimulationUnknowns/.(Subscript[head_,indexes__]-> Subscript[head,indexes,SimulationLabel]),InverseSimulationUnknowns,List];];
,0];

Animation[t_]:=(Function[{var1,var2},Line[Join[Subscript[n,var1,#][t]&/@var2,{Subscript[n,var1,First[var2]][t]}]]]@@@(Reap[Sow[#2,{#1}]&@@@NodesIndexes,_,List][[2]]))/.((Subscript[q,##][t]-> Subscript[q,##,SimulationLabel][t])&@@@VariableCoordinatesIndexes);
];


DirectSimulation=Function[{SimulationLabel,SimulationTime,SimulationData,InitialNodalStates,BaumgarteStabilizationConstants},
	
InitialStates=Join[(InitialNodalStates/.(Equal-> Rule)),Flatten@NSolve[Join[Flatten[((#==0)&/@(HolonomicConstraintEquations/.{t->0}))/.SimulationData/.(InitialNodalStates/.(Equal-> Rule))],Flatten[(Subscript[a,##]>0)&@@@ParametersIndexes],Flatten[((#==0)&/@(ConstraintEquations/.{t->0}))/.SimulationData/.(InitialNodalStates/.(Equal-> Rule))],Flatten[((#==0)&/@(QuasivelocitiesTransformations/.{t->0}))/.SimulationData/.(InitialNodalStates/.(Equal-> Rule))]],Join[Flatten@Complement[Join[Coordinates[0],Coordinates'[0],Quasivelocities[0]],(#[[1]])&/@InitialNodalStates],Subscript[a,##]&@@@ParametersIndexes]]];

UnknownStateVariables=Join[Subscript[q,##]&@@@VariableCoordinatesIndexes,Subscript[p,##]&@@@VariableQuasivelocitiesIndexes];

MotionRules[t_]:=Join[(Subscript[q,##]-> Subscript[q,##][t])&@@@VariableCoordinatesIndexes,(Subscript[p,##]-> Subscript[p,##][t])&@@@VariableQuasivelocitiesIndexes,(Subscript[p,##]'->Subscript[p,##]'[t])&@@@VariableQuasivelocitiesIndexes];

DirectDynamicsEquations[t_]:=Join[(#==0)&/@(DynamicEquations[MotionRules[t]]/.SimulationData/.InitialStates),(#==0)&/@((D[ConstraintEquations,t]+BaumgarteStabilizationConstants[[1]]ConstraintEquations)/.SimulationData/.InitialStates),(#==0)&/@(QuasivelocitiesTransformations/.SimulationData/.InitialStates),((#==(#/.InitialStates))&/@Join[Coordinates[0],Quasivelocities[0]]/.SimulationData)];

DirectDynamicSimulationR=Flatten@NDSolve[(DirectDynamicsEquations[t]),UnknownStateVariables,{t,0,SimulationTime}]//Quiet;

Inner[(#1[t_]=#2[t])&,UnknownStateVariables/.(Subscript[head_,indexes__]->Subscript[head,indexes,SimulationLabel] ),UnknownStateVariables/.DirectDynamicSimulationR,List];

DirectDynamicsAnimation[t_]:=(Function[{var1,var2},Line[Subscript[n,var1,#][t]&/@var2]]@@@(Reap[Sow[#2,{#1}]&@@@NodesIndexes,_,List][[2]]))/.((Subscript[q,##][t]-> Subscript[q,##,SimulationLabel][t])&@@@VariableCoordinatesIndexes);
];


SplitStyle[styles__]:=Module[{st=Directive/@{styles}},{{Last[st=RotateLeft@st],#}}&];

SetOptions[Plot,BaseStyle->{FontFamily->"Arial",FontSize->16}];
SetOptions[Plot3D,BaseStyle->{FontFamily->"Arial",FontSize->14}];
SetOptions[ParametricPlot,BaseStyle->{FontFamily->"Arial",FontSize->16}];
SetOptions[ParametricPlot3D,BaseStyle->{FontFamily->"Arial",FontSize->14}];
SetOptions[ListPlot,BaseStyle->{FontFamily->"Arial",FontSize->16}];
Style8={{Hue[0.6,1,1],Thickness[0.005]},{Hue[0.3,1,1],Thickness[0.006],Dashed},{Hue[1,1,1],Thickness[0.007],Dotted},{Hue[0.1,1,1],Thickness[0.005]},{Hue[0.9,1,1],Thickness[0.006],Dashed},{Hue[0.5,1,1],Thickness[0.007],Dotted},{Hue[0.2,1,1],Thickness[0.005]},{Hue[0.8,1,1],Thickness[0.006],Dashed}};

SPlot=Module[{st=Style8},TableForm[{Plot[#1,#2,PlotStyle->SplitStyle@@Style8,PlotRange->Full,Frame->True,FrameLabel->#3,PlotLabel->#4,GridLines->Automatic,ImageSize->1.15 {500,300}],Graphics[{Black,Directive[FontFamily->"Arial",FontSize->16],MapIndexed[Text[#1,{10(First[#2]-1)+6,0}]&,#5],MapIndexed[Join[Last[st=RotateLeft@st],{Line[{{10(First[#2]-1),0},{10(First[#2]-1)+3,0}}]}]&,#5]},ImageSize->1.15 {500,30}]}]]&;
